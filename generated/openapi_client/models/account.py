# coding: utf-8

"""
    Firefly III API v6.2.9

    This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-03-05T19:12:52+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 

    The version of the OpenAPI document: v6.2.9
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.account_role_property import AccountRoleProperty
from openapi_client.models.credit_card_type_property import CreditCardTypeProperty
from openapi_client.models.interest_period_property import InterestPeriodProperty
from openapi_client.models.liability_direction_property import LiabilityDirectionProperty
from openapi_client.models.liability_type_property import LiabilityTypeProperty
from openapi_client.models.short_account_type_property import ShortAccountTypeProperty
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account
    """ # noqa: E501
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    active: Optional[StrictBool] = Field(default=True, description="If omitted, defaults to true.")
    order: Optional[StrictInt] = Field(default=None, description="Order of the account. Is NULL if account is not asset or liability.")
    name: StrictStr
    type: ShortAccountTypeProperty
    account_role: Optional[AccountRoleProperty] = None
    currency_id: Optional[StrictStr] = Field(default=None, description="Use either currency_id or currency_code. Defaults to the user's default currency.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Use either currency_id or currency_code. Defaults to the user's default currency.")
    currency_symbol: Optional[StrictStr] = None
    currency_decimal_places: Optional[StrictInt] = None
    native_currency_id: Optional[StrictStr] = Field(default=None, description="Returns the native currency ID of the administration.")
    native_currency_code: Optional[StrictStr] = Field(default=None, description="Returns the native currency code of the administration.")
    native_currency_symbol: Optional[StrictStr] = Field(default=None, description="Returns the native currency symbol of the administration.")
    native_currency_decimal_places: Optional[StrictInt] = Field(default=None, description="Returns the native currency decimal places of the administration.")
    current_balance: Optional[StrictStr] = Field(default=None, description="The current balance of the account in the account's currency OR the native currency if the account has no currency.")
    native_current_balance: Optional[StrictStr] = Field(default=None, description="The current balance of the account in the administration's native currency.")
    current_balance_date: Optional[datetime] = Field(default=None, description="The timestamp for this date is always 23:59:59, to indicate it's the balance at the very END of that particular day.")
    notes: Optional[StrictStr] = None
    monthly_payment_date: Optional[datetime] = Field(default=None, description="Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.")
    credit_card_type: Optional[CreditCardTypeProperty] = None
    account_number: Optional[StrictStr] = None
    iban: Optional[StrictStr] = None
    bic: Optional[StrictStr] = None
    virtual_balance: Optional[StrictStr] = Field(default=None, description="The virtual balance of the account in the account's currency or the administration's native currency if the account has no currency.")
    native_virtual_balance: Optional[StrictStr] = Field(default=None, description="The virtual balance of the account in administration's native currency.")
    opening_balance: Optional[StrictStr] = Field(default=None, description="Represents the opening balance, the initial amount this account holds in the currency of the account or the administration's native currency if the account has no currency.")
    native_opening_balance: Optional[StrictStr] = Field(default=None, description="Represents the opening balance, in the administration's native currency.")
    opening_balance_date: Optional[datetime] = Field(default=None, description="Represents the date of the opening balance.")
    liability_type: Optional[LiabilityTypeProperty] = None
    liability_direction: Optional[LiabilityDirectionProperty] = None
    interest: Optional[StrictStr] = Field(default=None, description="Mandatory when type is liability. Interest percentage.")
    interest_period: Optional[InterestPeriodProperty] = None
    current_debt: Optional[StrictStr] = Field(default=None, description="Represents the current debt for liabilities.")
    include_net_worth: Optional[StrictBool] = Field(default=True, description="If omitted, defaults to true.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the accounts's location, if applicable. Can be used to draw a map.")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the accounts's location, if applicable. Can be used to draw a map.")
    zoom_level: Optional[StrictInt] = Field(default=None, description="Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.")
    __properties: ClassVar[List[str]] = ["created_at", "updated_at", "active", "order", "name", "type", "account_role", "currency_id", "currency_code", "currency_symbol", "currency_decimal_places", "native_currency_id", "native_currency_code", "native_currency_symbol", "native_currency_decimal_places", "current_balance", "native_current_balance", "current_balance_date", "notes", "monthly_payment_date", "credit_card_type", "account_number", "iban", "bic", "virtual_balance", "native_virtual_balance", "opening_balance", "native_opening_balance", "opening_balance_date", "liability_type", "liability_direction", "interest", "interest_period", "current_debt", "include_net_worth", "longitude", "latitude", "zoom_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "updated_at",
            "currency_symbol",
            "currency_decimal_places",
            "native_currency_id",
            "native_currency_symbol",
            "native_currency_decimal_places",
            "current_balance",
            "native_current_balance",
            "current_balance_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if account_role (nullable) is None
        # and model_fields_set contains the field
        if self.account_role is None and "account_role" in self.model_fields_set:
            _dict['account_role'] = None

        # set to None if native_currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.native_currency_id is None and "native_currency_id" in self.model_fields_set:
            _dict['native_currency_id'] = None

        # set to None if native_currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.native_currency_code is None and "native_currency_code" in self.model_fields_set:
            _dict['native_currency_code'] = None

        # set to None if native_currency_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.native_currency_symbol is None and "native_currency_symbol" in self.model_fields_set:
            _dict['native_currency_symbol'] = None

        # set to None if native_currency_decimal_places (nullable) is None
        # and model_fields_set contains the field
        if self.native_currency_decimal_places is None and "native_currency_decimal_places" in self.model_fields_set:
            _dict['native_currency_decimal_places'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if monthly_payment_date (nullable) is None
        # and model_fields_set contains the field
        if self.monthly_payment_date is None and "monthly_payment_date" in self.model_fields_set:
            _dict['monthly_payment_date'] = None

        # set to None if credit_card_type (nullable) is None
        # and model_fields_set contains the field
        if self.credit_card_type is None and "credit_card_type" in self.model_fields_set:
            _dict['credit_card_type'] = None

        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['account_number'] = None

        # set to None if iban (nullable) is None
        # and model_fields_set contains the field
        if self.iban is None and "iban" in self.model_fields_set:
            _dict['iban'] = None

        # set to None if bic (nullable) is None
        # and model_fields_set contains the field
        if self.bic is None and "bic" in self.model_fields_set:
            _dict['bic'] = None

        # set to None if opening_balance_date (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance_date is None and "opening_balance_date" in self.model_fields_set:
            _dict['opening_balance_date'] = None

        # set to None if liability_type (nullable) is None
        # and model_fields_set contains the field
        if self.liability_type is None and "liability_type" in self.model_fields_set:
            _dict['liability_type'] = None

        # set to None if liability_direction (nullable) is None
        # and model_fields_set contains the field
        if self.liability_direction is None and "liability_direction" in self.model_fields_set:
            _dict['liability_direction'] = None

        # set to None if interest (nullable) is None
        # and model_fields_set contains the field
        if self.interest is None and "interest" in self.model_fields_set:
            _dict['interest'] = None

        # set to None if interest_period (nullable) is None
        # and model_fields_set contains the field
        if self.interest_period is None and "interest_period" in self.model_fields_set:
            _dict['interest_period'] = None

        # set to None if current_debt (nullable) is None
        # and model_fields_set contains the field
        if self.current_debt is None and "current_debt" in self.model_fields_set:
            _dict['current_debt'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if zoom_level (nullable) is None
        # and model_fields_set contains the field
        if self.zoom_level is None and "zoom_level" in self.model_fields_set:
            _dict['zoom_level'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "order": obj.get("order"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "account_role": obj.get("account_role"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "currency_decimal_places": obj.get("currency_decimal_places"),
            "native_currency_id": obj.get("native_currency_id"),
            "native_currency_code": obj.get("native_currency_code"),
            "native_currency_symbol": obj.get("native_currency_symbol"),
            "native_currency_decimal_places": obj.get("native_currency_decimal_places"),
            "current_balance": obj.get("current_balance"),
            "native_current_balance": obj.get("native_current_balance"),
            "current_balance_date": obj.get("current_balance_date"),
            "notes": obj.get("notes"),
            "monthly_payment_date": obj.get("monthly_payment_date"),
            "credit_card_type": obj.get("credit_card_type"),
            "account_number": obj.get("account_number"),
            "iban": obj.get("iban"),
            "bic": obj.get("bic"),
            "virtual_balance": obj.get("virtual_balance"),
            "native_virtual_balance": obj.get("native_virtual_balance"),
            "opening_balance": obj.get("opening_balance"),
            "native_opening_balance": obj.get("native_opening_balance"),
            "opening_balance_date": obj.get("opening_balance_date"),
            "liability_type": obj.get("liability_type"),
            "liability_direction": obj.get("liability_direction"),
            "interest": obj.get("interest"),
            "interest_period": obj.get("interest_period"),
            "current_debt": obj.get("current_debt"),
            "include_net_worth": obj.get("include_net_worth") if obj.get("include_net_worth") is not None else True,
            "longitude": obj.get("longitude"),
            "latitude": obj.get("latitude"),
            "zoom_level": obj.get("zoom_level")
        })
        return _obj


